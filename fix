#!/bin/bash

# --- Konfigurasi Umum ---
WS_STUNNEL_SCRIPT="/usr/local/bin/ws-stunnel"
NGINX_XRAY_CONF="/etc/nginx/conf.d/xray.conf"
WS_STUNNEL_PORT="700" # Port yang didengarkan ws-stunnel
DROPBEAR_PORT="50000" # Port Dropbear Anda

echo "================================================"
echo "Memulai Proses Instalasi/Perbaikan ws-stunnel"
echo "================================================"

# --- Fungsi untuk Backup ---
backup_file() {
    local file=$1
    if [ -f "$file" ]; then
        cp -f "$file" "${file}.bak_$(date +%Y%m%d_%H%M%S)"
        echo "Backup $file berhasil dibuat."
    else
        echo "File $file tidak ditemukan, tidak ada backup yang dibuat."
    fi
}

# --- 1. Perbarui Script ws-stunnel ---
echo -e "\n--- Mengupdate script ws-stunnel ---"
backup_file "$WS_STUNNEL_SCRIPT"

cat << 'EOF' | sudo tee "$WS_STUNNEL_SCRIPT" > /dev/null
#!/usr/bin/python3
import socket, threading, select, signal, sys, time, getopt

# Listen
LISTENING_ADDR = '127.0.0.1'
if sys.argv[1:]:
    LISTENING_PORT = sys.argv[1]
else:
    LISTENING_PORT = 700
#Pass
PASS = ''

# CONST
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = '127.0.0.1:50000' # PASTIKAN INI PORT DROPBEAR ANDA
RESPONSE = 'HTTP/1.1 101 <b><font color="green">HOKAGE LEGEND YOUTB</font></b>\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: foo\r\n\r\n'

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
        self.threadsLock = threading.Lock()
        self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        intport = int(self.port)
        self.soc.bind((self.host, intport))
        self.soc.listen(0)
        self.running = True

        try:
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue

                conn = ConnectionHandler(c, self, addr)
                conn.start()
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()

    def printLog(self, log):
        self.logLock.acquire()
        print(log)
        self.logLock.release()

    def addConn(self, conn):
        try:
            self.threadsLock.acquire()
            if self.running:
                self.threads.append(conn)
        finally:
            self.threadsLock.release()

    def removeConn(self, conn):
        try:
            self.threadsLock.acquire()
            if conn in self.threads: # Cek apakah 'conn' ada di list sebelum menghapus
                self.threads.remove(conn)
            else:
                # Opsional: Tambahkan logging jika elemen tidak ditemukan, ini bisa membantu debugging
                self.printLog(f"Warning: Attempted to remove connection {conn} that was not in list. (Already removed or never added?)")
        finally:
            self.threadsLock.release()

    def close(self):
        try:
            self.running = False
            self.threadsLock.acquire()

            threads = list(self.threads)
            for c in threads:
                c.close()
        finally:
            self.threadsLock.release()


class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = b'' # Initialize as bytes
        self.server = server
        self.log = 'Connection: ' + str(addr)

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True

        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            # --- DEBUG LOGGING TAMBAHAN DIMULAI DI SINI ---
            try:
                self.client_buffer = self.client.recv(BUFLEN)
                self.server.printLog(f"DEBUG: Received raw client_buffer: {self.client_buffer!r}")
            except Exception as e:
                self.server.printLog(f"ERROR: Failed to receive initial client data: {e}")
                self.close()
                self.server.removeConn(self)
                return # Keluar dari thread jika gagal menerima data awal
            # --- DEBUG LOGGING TAMBAHAN BERAKHIR DI SINI ---

            # Decode bytes to string for header parsing
            client_buffer_str = self.client_buffer.decode('latin-1')
            self.server.printLog(f"DEBUG: Decoded client_buffer_str: {client_buffer_str!r}") # Debug decoded string

            hostPort = self.findHeader(client_buffer_str, 'X-Real-Host')

            if hostPort == '':
                hostPort = DEFAULT_HOST

            split = self.findHeader(client_buffer_str, 'X-Split')

            if split != '':
                self.client.recv(BUFLEN)

            if hostPort != '':
                passwd = self.findHeader(client_buffer_str, 'X-Pass')

                if len(PASS) != 0 and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif len(PASS) != 0 and passwd != PASS:
                    self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n'.encode('latin-1'))
                elif hostPort.startswith('127.0.0.1') or hostPort.startswith('localhost'):
                    self.method_CONNECT(hostPort)
                else:
                    self.server.printLog('- No X-Real-Host!') # Menggunakan printLog
                    self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n'.encode('latin-1'))
            else:
                self.server.printLog('- No X-Real-Host!') # Menggunakan printLog
                self.client.send('HTTP/1.1 400 NoXRealHost!\r\n\r\n'.encode('latin-1'))

        except Exception as e:
            self.log += ' - error: ' + str(e)
            self.server.printLog(self.log)
            pass
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        aux = head.find(header + ': ')

        if aux == -1:
            return ''

        aux = head.find(':', aux)
        head = head[aux+2:]
        aux = head.find('\r\n')

        if aux == -1:
            return ''

        return head[:aux];

    def connect_target(self, host):
        i = host.find(':')
        if i != -1:
            port = int(host[i+1:])
            host = host[:i]
        else:
            if hasattr(self, 'method') and self.method=='CONNECT':
                port = 443
            else:
                port = int(LISTENING_PORT) # Default to LISTENING_PORT
                if len(sys.argv) > 1 and sys.argv[1].isdigit():
                    port = int(sys.argv[1])


        (soc_family, soc_type, proto, _, address) = socket.getaddrinfo(host, port)[0]

        self.target = socket.socket(soc_family, soc_type, proto)
        self.targetClosed = False
        self.target.connect(address)

    def method_CONNECT(self, path):
        self.log += ' - CONNECT ' + path

        self.connect_target(path)
        self.client.sendall(RESPONSE.encode('latin-1'))
        self.client_buffer = b'' # Ensure buffer is cleared as bytes

        self.server.printLog(self.log)
        self.doCONNECT()

    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        error = False
        while True:
            count += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
            if err:
                error = True
            if recv:
                for in_ in recv:
                    try:
                        data = in_.recv(BUFLEN)
                        if data:
                            if in_ is self.target:
                                self.client.send(data)
                            else:
                                while data:
                                    byte = self.target.send(data)
                                    data = data[byte:]

                            count = 0
                        else:
                            break
                    except Exception as e:
                        error = True
                        break
            if count == TIMEOUT:
                error = True
            if error:
                break


def print_usage():
    print('Usage: proxy.py -p <port>')
    print('        proxy.py -b <bindAddr> -p <port>')
    print('        proxy.py -b 0.0.0.0 -p 80')

def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT

    try:
        opts, args = getopt.getopt(argv,"hb:p:",["bind=","port="])
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)


def main(host=LISTENING_ADDR, port=LISTENING_PORT):
    print("\n:-------PythonProxy-------:\n")
    print("Listening addr: " + LISTENING_ADDR)
    print("Listening port: " + str(LISTENING_PORT) + "\n")
    print(":-------------------------:\n")
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()
    while True:
        try:
            time.sleep(2)
        except KeyboardInterrupt:
            print('Stopping...')
            server.close()
            break

#######     parse_args(sys.argv[1:])
if __name__ == '__main__':
    main()
EOF

# --- Set Izin Eksekusi untuk Script ws-stunnel ---
echo -e "\n--- Mengatur izin eksekusi untuk ws-stunnel ---"
sudo chmod +x "$WS_STUNNEL_SCRIPT"
if [ $? -eq 0 ]; then
    echo "Izin eksekusi berhasil diatur untuk $WS_STUNNEL_SCRIPT."
else
    echo "Gagal mengatur izin eksekusi untuk $WS_STUNNEL_SCRIPT."
    exit 1
fi

# --- 2. Perbarui Konfigurasi Nginx ---
echo -e "\n--- Mengupdate konfigurasi Nginx ($NGINX_XRAY_CONF) ---"
backup_file "$NGINX_XRAY_CONF"

# Block konfigurasi Nginx yang akan ditambahkan
NGINX_SSH_WS_BLOCK="
        location = /ssh-ws {
            proxy_pass http://127.0.0.1:${WS_STUNNEL_PORT};
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection \"upgrade\";
            proxy_set_header Host \$host;
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }"

# Memeriksa apakah blok sudah ada sebelum menambahkan
if grep -q "location = /ssh-ws" "$NGINX_XRAY_CONF"; then
    echo "Blok 'location = /ssh-ws' sudah ada di $NGINX_XRAY_CONF. Melewati penambahan."
else
    # Mencari lokasi untuk menyisipkan blok baru (sebelum 'location /')
    # Menggunakan awk untuk lebih aman dalam penanganan multi-line
    awk -v block="$NGINX_SSH_WS_BLOCK" '
    /^        location \/$/ {
        print block
    }
    {print}
    ' "$NGINX_XRAY_CONF" > "${NGINX_XRAY_CONF}.tmp" && \
    mv "${NGINX_XRAY_CONF}.tmp" "$NGINX_XRAY_CONF"

    if [ $? -eq 0 ]; then
        echo "Blok 'location = /ssh-ws' berhasil ditambahkan ke $NGINX_XRAY_CONF."
    else
        echo "Gagal menambahkan blok 'location = /ssh-ws' ke $NGINX_XRAY_CONF."
        exit 1
    fi
fi

# --- 3. Uji dan Reload Nginx ---
echo -e "\n--- Menguji konfigurasi Nginx ---"
sudo nginx -t
if [ $? -eq 0 ]; then
    echo "Konfigurasi Nginx OK. Melakukan reload..."
    sudo systemctl reload nginx
    if [ $? -eq 0 ]; then
        echo "Nginx berhasil di-reload."
    else
        echo "Gagal me-reload Nginx. Coba 'sudo systemctl restart nginx' secara manual."
        exit 1
    fi
else
    echo "Konfigurasi Nginx GAGAL. Periksa error di atas."
    exit 1
fi

# --- 4. Restart Layanan ws-stunnel ---
echo -e "\n--- Merestart layanan ws-stunnel ---"
sudo systemctl daemon-reload # Muat ulang unit systemd jika ada perubahan
sudo systemctl restart ws-stunnel
if [ $? -eq 0 ]; then
    echo "Layanan ws-stunnel berhasil di-restart."
    echo "Silakan cek statusnya: 'systemctl status ws-stunnel' dan lognya: 'journalctl -u ws-stunnel.service -f'"
else
    echo "Gagal me-restart layanan ws-stunnel. Periksa log systemd."
    exit 1
fi

echo -e "\n================================================"
echo "Proses instalasi/perbaikan selesai."
echo "Jangan lupa sesuaikan konfigurasi DarkTunnel:"
echo "Payload: GET /ssh-ws HTTP/1.1[crlf]Host: [host][crlf]Connection: Keep-Alive[crlf]Upgrade: websocket[crlf][crlf]"
echo "Target: 127.0.0.1:50000"
echo "================================================"
